from app.services.autocode import *


def on_new_issue(new_issue):
    # autocode, raise PR, link to the issue
    issue_url = new_issue.issue.html_url
    issue_title = new_issue.issue.title
    issue_body = new_issue.issue.body
    print(f"New issue: {new_issue}")
    implement_task(issue_url, issue_title, issue_body)
    return {'message': 'New PR has been raised for new issue {issue_url}'}


def on_new_pr(pr):
    # Review _then_ beautify code as per PEP8. Do not do it the other way around.
    # Goal: When we beautify, we'll make a new commit and that will trigger the webhook again.
    # We can simply ignore that commit (by checking the commit message).
    # If we beatify then review, we can't ignore the beautification commit.
    # PR raised by AI will have a single commit with a particular commit message
    # which will be used as the PR title. Therefore, we can also ignore the first commit in the PR.
    # E.g. First commit message = PR title = Github Bot: <Github Issue Title>
    # But the beautification commit message is generated by AI -> not safe to rely on message
    # Better rely on commit author. This means we need a separate user for the github bot.
    print(f"New PR: {pr}")
    return {'message': 'New issue'}


def on_new_pr_commit(repo_path, pr_url, source_branch):
    # TODO beautify code, review code, unless it's the PR raised by AI (how to know?)
    print(f"New PR commit: {repo_path} {pr_url} {source_branch}")
    return {'message': 'New PR commit'}


def on_new_main_commit():
    # TODO upload to pinecone - currently the code we have worked with only support pdf loader
    # See other loaders here, especially for code https://github.com/langchain-ai/langchain/discussions/19020
    print(f"New main commit")
    return {'message': 'New main commit'}


def on_new_pr_comment(pr_url, source_branch, comment):
    # TODO address the review comment if it begins with /support, do not make commit
    print(f"New PR comment: {pr_url} {source_branch} {comment}")
    return {'message': 'New PR comment'}


def on_new_pr_review(pr_url, source_branch, comments):
    # TODO address the review comment if it begins with /support, do not make commit
    print(f"New PR comment: {pr_url} {source_branch} {comments}")
    return {'message': 'New PR review'}


def scheduled_cleanup():
    return {'message': 'Scheduled cleanup'}
